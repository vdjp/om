#include <bits/stdc++.h>
using namespace std;
typedef pair<int, int> pii;
void printpath(map<pii, pii> mp, pii u)
{
    if (u.first == 0 && u.second == 0) {
        cout << 0 << " " << 0 << endl;
        return;
    }
    printpath(mp, mp[u]);
    cout << u.first << " " << u.second << endl;
}
void BFS(int a, int b, int target)
{
    map<pii, int> m;
    bool isSolvable = false;
    map<pii, pii> mp;

    queue<pii> q;

    q.push(make_pair(0, 0));
    while (!q.empty()) {

        auto u = q.front();
        // cout<<u.first<<" "<<u.second<<endl;
        q.pop();
        if (m[u] == 1)
            continue;

        if ((u.first > a || u.second > b || u.first < 0
            || u.second < 0))
            continue;
        // cout<<u.first<<" "<<u.second<<endl;

        m[{ u.first, u.second }] = 1;

        if (u.first == target || u.second == target) {
            isSolvable = true;

            printpath(mp, u);
            if (u.first == target) {
                if (u.second != 0)
                    cout << u.first << " " << 0 << endl;
            }
            else {
                if (u.first != 0)
                    cout << 0 << " " << u.second << endl;
            }
            return;
        }
        // completely fill the jug 2
        if (m[{ u.first, b }] != 1) {
            q.push({ u.first, b });
            mp[{ u.first, b }] = u;
        }

        // completely fill the jug 1
        if (m[{ a, u.second }] != 1) {
            q.push({ a, u.second });
            mp[{ a, u.second }] = u;
        }

        // transfer jug 1 -> jug 2
        int d = b - u.second;
        if (u.first >= d) {
            int c = u.first - d;
            if (m[{ c, b }] != 1) {
                q.push({ c, b });
                mp[{ c, b }] = u;
            }
        }
        else {
            int c = u.first + u.second;
            if (m[{ 0, c }] != 1) {
                q.push({ 0, c });
                mp[{ 0, c }] = u;
            }
        }
        // transfer jug 2 -> jug 1
        d = a - u.first;
        if (u.second >= d) {
            int c = u.second - d;
            if (m[{ a, c }] != 1) {
                q.push({ a, c });
                mp[{ a, c }] = u;
            }
        }
        else {
            int c = u.first + u.second;
            if (m[{ c, 0 }] != 1) {
                q.push({ c, 0 });
                mp[{ c, 0 }] = u;
            }
        }

        // empty the jug 2
        if (m[{ u.first, 0 }] != 1) {
            q.push({ u.first, 0 });
            mp[{ u.first, 0 }] = u;
        }

        // empty the jug 1
        if (m[{ 0, u.second }] != 1) {
            q.push({ 0, u.second });
            mp[{ 0, u.second }] = u;
        }
    }
    if (!isSolvable)
        cout << "No solution";
}

map<pii,int>vis;
int g_jug1,g_jug2,g_target;
void dfs(int jug1,int jug2,vector<pair<int,int>>ans){
    if (vis[{jug1,jug2}]==1){
        return;
    }
    vis[{jug1,jug2}]=1;
    if (jug1==g_target || jug2==g_target){
        for (auto c:ans){
            cout << c.first << " " << c.second << endl;
        }
        cout << endl;
        cout << endl;
        return;
    }
    if ((jug1 > g_jug1 || jug2 > g_jug2 || jug1 < 0 || jug2 < 0)){
        return;
    }


    // completely fill the jug 2
        if (vis[{jug1,g_jug2}] != 1) {
            ans.push_back({jug1,g_jug2});
            dfs(jug1,g_jug2,ans);
            ans.pop_back();
        }

        // completely fill the jug 1
        if (vis[{g_jug1,jug2}] != 1) {
            ans.push_back({g_jug1,jug2});
            dfs(g_jug1,jug2,ans);
            ans.pop_back();
        }

        // transfer jug 1 -> jug 2
        int d = g_jug2 - jug2;
        if (jug1 >= d) {
            int c = jug1 - d;
            if (vis[{ c, g_jug2 }] != 1) {
                ans.push_back({ c, g_jug2 });
                dfs(c,g_jug2,ans);
                ans.pop_back();
                
            }
        }
        else {
            int c = jug1 + jug2;
            if (vis[{ 0, c }] != 1) {
                ans.push_back({0,c});
                dfs(0,c,ans);
                ans.pop_back();
            }
        }
        // transfer jug 2 -> jug 1
        d = g_jug1 - jug1;
        if (jug2 >= d) {
            int c = jug2 - d;
            if (vis[{ g_jug1, c }] != 1) {
                ans.push_back({g_jug1,c});
                dfs(g_jug1,c,ans);
                ans.pop_back();
                
            }
        }
        else {
            int c = jug1 + jug2;
            if (vis[{ c, 0 }] != 1) {
                ans.push_back({c,0});
                dfs(c,0,ans);
                ans.pop_back();
            }
        }

        // empty the jug 2
        if (vis[{ jug1, 0}] != 1) {
            ans.push_back({jug1,0});
                dfs(jug1,0,ans);
                ans.pop_back();
        }
        // empty the jug 1
        if (vis[{ 0, jug2}] != 1) {
            ans.push_back({0,jug2});
                dfs(0,jug2,ans);
                ans.pop_back();
        }



}

int main()
{
    int Jug1 = 4, Jug2 = 3, target = 2;
    g_jug1=Jug1;
    g_jug2=Jug2;
    g_target=target;
    vector<pair<int,int>>ans;

    dfs(Jug1,Jug2,ans);
    cout << endl;
    BFS(Jug1,Jug2,target);
    return 0;
}
