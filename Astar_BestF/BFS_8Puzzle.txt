import java.util.*;

class Node implements Comparable<Node> {
    int[][] state;
    Node parent;
    int heuristic;

    public Node(int[][] state, Node parent) {
        this.state = state;
        this.parent = parent;
        this.heuristic = calculateHeuristic();
    }

    private int calculateHeuristic() {
        int distance = 0;
        int n = state.length;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                int value = state[i][j];
                if (value != 0) {
                    int targetRow = (value - 1) / n;
                    int targetCol = (value - 1) % n;
                    distance += Math.abs(i - targetRow) + Math.abs(j - targetCol);
                }
            }
        }

        return distance;
    }

    @Override
    public int compareTo(Node other) {
        return Integer.compare(this.heuristic, other.heuristic);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Node other = (Node) obj;
        return Arrays.deepEquals(this.state, other.state);
    }

    @Override
    public int hashCode() {
        return Arrays.deepHashCode(state);
    }
}

class EightPuzzleBestFirstSearch {

    public static void main(String[] args) {
        int[][] initial = {
                {1, 2, 3},
                {4, 0, 5},
                {6, 7, 8}
        };

        solve(initial);
    }

    public static void solve(int[][] initial) {
        int[][] goal = {
                {1, 2, 3},
                {4, 5, 6},
                {7, 8, 0}
        };

        Node initialNode = new Node(initial, null);
        PriorityQueue<Node> openSet = new PriorityQueue<>();
        Set<Node> closedSet = new HashSet<>();

        openSet.add(initialNode);

        while (!openSet.isEmpty()) {
            Node currentNode = openSet.poll();

            if (Arrays.deepEquals(currentNode.state, goal)) {
                printSolution(currentNode);
                return;
            }

            closedSet.add(currentNode);

            for (Node neighbor : getNeighbors(currentNode)) {
                if (!closedSet.contains(neighbor) && !openSet.contains(neighbor)) {
                    openSet.add(neighbor);
                }
            }
        }

        System.out.println("No solution found");
    }

    public static List<Node> getNeighbors(Node node) {
        List<Node> neighbors = new ArrayList<>();
        int zeroRow = 0, zeroCol = 0;
        int n = node.state.length;

        outer:
        for (zeroRow = 0; zeroRow < n; zeroRow++) {
            for (zeroCol = 0; zeroCol < n; zeroCol++) {
                if (node.state[zeroRow][zeroCol] == 0) {
                    break outer;
                }
            }
        }

        int[][] directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};

        for (int[] dir : directions) {
            int newRow = zeroRow + dir[0];
            int newCol = zeroCol + dir[1];

            if (isValid(newRow, newCol, n)) {
                int[][] newState = swapTiles(node.state, zeroRow, zeroCol, newRow, newCol);
                Node neighbor = new Node(newState, node);
                neighbors.add(neighbor);
            }
        }

        return neighbors;
    }

    public static boolean isValid(int row, int col, int n) {
        return row >= 0 && row < n && col >= 0 && col < n;
    }

    public static int[][] swapTiles(int[][] state, int row1, int col1, int row2, int col2) {
        int[][] newState = new int[state.length][state[0].length];

        for (int i = 0; i < state.length; i++) {
            for (int j = 0; j < state[0].length; j++) {
                newState[i][j] = state[i][j];
            }
        }

        int temp = newState[row1][col1];
        newState[row1][col1] = newState[row2][col2];
        newState[row2][col2] = temp;

        return newState;
    }

    public static void printSolution(Node node) {
        System.out.println("Solution found!");
        printPath(node);
    }

    public static void printPath(Node node) {
        if (node != null) {
            printPath(node.parent);
            printPuzzle(node.state);
            System.out.println();
        }
    }

    public static void printPuzzle(int[][] state) {
        for (int[] row : state) {
            for (int num : row) {
                System.out.print(num + " ");
            }
            System.out.println();
        }
    }
}


